#!/usr/bin/env bash
#
# dot
#
# `dot` handles installation, updates, things like that. Run it periodically
# to make sure you're on the latest and greatest.

set -e
trap handle_error SIGKILL SIGTERM

cd "$(dirname "$0")/.."

export DOTFILES=$HOME/.dotfiles
GITHUB_REPOSITORY_URL="https://github.com/nunorafaelrocha/dotfiles"

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit 1
}

handle_error () {
  fail "Oh no! An error occurred. If you need help solving the problem, open a new issue ${GITHUB_REPOSITORY_URL}/issues/new"
}

command_exists() {
  command -v $1 > /dev/null 2>&1
}

help() {
  banner
  echo "dot -- dotfiles management"
  echo ""
  echo "Usage: dot [options]"
  echo ""
  echo "Options:"
  echo "  -i, --install              Install dotfiles"
  echo "  -e, --edit                 Open dotfiles directory for editing"
  echo "  -h, --help                 Show this help message and exit"
  echo "  -s, --install-software     Install software"
  echo "  --set-defaults             Set OS defaults"
  echo "  --link                     Link .symlink files"
  echo "  --setup-projects-folder    Setup projects folder"
  echo "  --setup-git                Setup gitconfig"
  exit
}

banner() {
  echo ""
  echo ""
  echo "██████╗  ██████╗ ████████╗███████╗██╗██╗     ███████╗███████╗"
  echo "██╔══██╗██╔═══██╗╚══██╔══╝██╔════╝██║██║     ██╔════╝██╔════╝"
  echo "██║  ██║██║   ██║   ██║   █████╗  ██║██║     █████╗  ███████╗"
  echo "██║  ██║██║   ██║   ██║   ██╔══╝  ██║██║     ██╔══╝  ╚════██║"
  echo "██████╔╝╚██████╔╝   ██║   ██║     ██║███████╗███████╗███████║"
  echo "╚═════╝  ╚═════╝    ╚═╝   ╚═╝     ╚═╝╚══════╝╚══════╝╚══════╝"
  echo "                                                             "
  echo "██████╗ ██╗   ██╗    ███╗   ██╗██╗   ██╗███╗   ██╗ ██████╗   "
  echo "██╔══██╗╚██╗ ██╔╝    ████╗  ██║██║   ██║████╗  ██║██╔═══██╗  "
  echo "██████╔╝ ╚████╔╝     ██╔██╗ ██║██║   ██║██╔██╗ ██║██║   ██║  "
  echo "██╔══██╗  ╚██╔╝      ██║╚██╗██║██║   ██║██║╚██╗██║██║   ██║  "
  echo "██████╔╝   ██║       ██║ ╚████║╚██████╔╝██║ ╚████║╚██████╔╝  "
  echo "╚═════╝    ╚═╝       ╚═╝  ╚═══╝ ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝   "
  echo ""
  echo ""
}

setup_projects_dir () {
  mkdir -p ~/Projects

  success 'Projects folder created'
}

setup_gitconfig () {
  info 'Setting up gitconfig...'

  if ! [ -f $DOTFILES/git/gitconfig.local.symlink ]; then
    git_credential='cache'
    if [ `uname` == "Darwin" ]; then
      git_credential='osxkeychain'
    fi

    read -p "- What is your github author name? " git_authorname
    read -p "- What is your github author email? " git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" $DOTFILES/git/gitconfig.local.symlink.example > $DOTFILES/git/gitconfig.local.symlink

    success 'Finished setting up gitconfig.'
  else
    success 'The gitconfig.local already exists. Skipping...'
  fi
}

set_os_defaults() {
  if [ `uname` == "Darwin" ]; then
    info "Installing macos defaults..."

    $DOTFILES/macos/set-defaults.sh
  else
    info "No OS defaults avaiable for your OS"
  fi

  success "OS defaults applied successfully. Note that some of these changes require a logout/restart to take effect."
}

clone_or_update_repository() {
  if [ ! -d $DOTFILES ]; then
    git clone --recursive "$GITHUB_REPOSITORY_URL.git" $DOTFILES
  else
    cd $DOTFILES
    branch=$(git rev-parse --abbrev-ref HEAD)
    git fetch --all && git rebase $branch
    cd -
  fi
}

# enter on Y/N linux seems to skip question
# don't run this as root!
# [: !=: unary operator expected

install_homebrew() {
  if test ! $(which brew); then
    info "Installing homebrew..."

    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

    # Linux: add Homebrew to your PATH and to your bash shell profile script,
    # either ~/.profile on Debian/Ubuntu or ~/.bash_profile on CentOS/Fedora/Red Hat.
    if test "$(expr substr $(uname -s) 1 5)" = "Linux"; then
      test -d ~/.linuxbrew && eval $(~/.linuxbrew/bin/brew shellenv)
      test -d /home/linuxbrew/.linuxbrew && eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
      test -r ~/.bash_profile && echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.bash_profile
      echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.profile
    fi
  else
    success "Brew already installed. Skipping..."
  fi
}

vim_custom_installer() {
  # Install Vundle, the plug-in manager for Vim.
  if [ ! -e $HOME/.vim/bundle/Vundle.vim ]; then
   git clone https://github.com/VundleVim/Vundle.vim.git $HOME/.vim/bundle/Vundle.vim
  fi

  # Install vim Vundle plugins
  vim -u $HOME/.vimrc.bundles +PluginUpdate +qa
}

install_software() {
  info "Updating Homebrew..."
  brew update
  brew upgrade
  brew cleanup

  info "Installing software..."

  if [ `uname` == 'Linux' ]; then
    brew bundle --file $DOTFILES/Brewfile.linux
  else
    brew bundle --file $DOTFILES/Brewfile
  fi

  # find the installers and run them iteratively
  info "Running custom installers..."

  # custom vim installer.
  vim_custom_installer
  success "vim installed"

  find . -name install.sh -not -path "./oh-my-zsh/*" | while read installer ; do bash -c "${installer}" ; success ${installer} ; done

  success "Software installed successfully."
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_link_files() {
	info 'Installing .symlink files...'

	local overwrite_all=false backup_all=false skip_all=false

	for src in $(find -H "$DOTFILES" -maxdepth 2 -name '*.symlink' -not -path '*.git*' -not -path "./oh-my-zsh/*" )
	do
		dst="$HOME/.$(basename "${src%.*}")"
		link_file "$src" "$dst"
	done

  success 'All .symlink files installed.'
}

install_cli_tools() {
  if [ `uname` == 'Linux' ]; then
    sudo apt-get update && sudo apt-get install build-essential curl wget -y
  elif [ `uname` == 'Darwin' ]; then

    if ! [ $(xcode-select -p) ]; then
      info "Installing Command Line Tools..."
      info "Please, wait until Command Line Tools will be installed, before continue."

      xcode-select --install

      success "Command Line Tools installed successfully."
    else
      success "Command Line Tools already installed. Skipping..."
    fi
  fi
}

install_git() {
  if ! command_exists git; then
    info "Installing Git..."

    if [ `uname` == 'Darwin' ]; then
      brew install git
    elif [ `uname` == 'Linux' ]; then
      sudo apt-get install git -y
    else
      fail "Error: Failed to install Git!"
    fi

    success "Git installed successfully."
  else
    success "Git already installed. Skipping..."
  fi
}

install_dotfiles() {
  echo "Checking for installed dotfiles in $DOTFILES..."
  echo ""

  if [ ! -d $DOTFILES ]
  then
    message="Do you want to install nuno's dotfiles? [Y/n] "
  else
    message="You already have dotfiles installed, do you want to update? [Y/n] "
  fi

  read -p "${message}" -n 1 y
  echo ""
  answer=`echo "${y}" | tr '[a-z]' '[A-Z]'`

  if [ ${answer} != "Y" ]
  then
    fail "Ok... maybe next time then."
  fi

  success "Here we go! 🚀"

  install_cli_tools
  install_git
  install_homebrew

  clone_or_update_repository
}

# Full install
main() {
  banner "$*"
  install_dotfiles "$*"
  setup_projects_dir
  setup_gitconfig
  install_link_files
  install_software
  set_os_defaults

  echo ""
  echo ""
  echo "Installation completed!!! Have fun! 🔥"
  echo ""
  exit
}

while test $# -gt 0; do
	case "$1" in
    "-i"|"--install")
      main
      exit
      ;;
    "-h"|"--help")
      help
      ;;
    "-e"|"--edit")
      exec "$EDITOR" "$DOTFILES"
      exit
      ;;
    "-s"|"--install-software")
      install_software
      exit
      ;;
    "--set-defaults")
      set_os_defaults
      exit
      ;;
    "--link")
      install_link_files
      exit
      ;;
    "--setup-projects-dir")
      setup_projects_dir
      exit
      ;;
    "--setup-git")
      setup_gitconfig
      exit
      ;;
    *)
      echo "Invalid option: $1"
      help
      exit
      ;;
	esac
	shift
done

main "$*"
